---
- name: Configure images directory
  set_fact:
    dir_images: '{{ dir_project }}/versions'
    file_container_config: '{{ dir_env }}/container-config.json'

- name: Configure paths
  set_fact:
    file_image: '{{ dir_images }}/{{ project_version }}.tar'
    file_image_local: '{{ image_local }}'

- include_tasks: build.yml
  when: not image_local

- name: Create project dirs
  file:
    path: "{{ item }}"
    state: directory
    mode: 0775
    group: '{{ group }}'
    owner: '{{ user }}'
  with_items:
    - '{{ dir_project }}'
    - '{{ dir_versions }}'

- name: Upload artifact
  copy:
    src: '{{ file_image_local }}'
    dest: '{{ file_image }}'

- name: List remote images
  find:
    paths: '{{ dir_images }}'
    recurse: true
  register: remote_images

- name: Filter old images
  set_fact:
    old_images: "{{ remote_images.files|sort(attribute='mtime')|map(attribute='path')|list }}"

- name: Delete old images
  file:
    state: absent
    path: "{{ item }}"
  loop: "{{ old_images[0:-2] }}"

- name: Import image
  docker_image:
    force_source: false
    force_tag: false
    load_path: '{{ file_image }}'
    name: '{{ project_name }}:{{ project_version }}'
    source: load
    state: present
    tag: '{{ project_version }}'

- name: Create hosting network
  docker_network:
    name: '{{ network_name }}'
    ipam_config:
      - subnet: '172.18.0.0/16'
        gateway: '172.18.0.1'

- name: Read container config
  block:
    - name: Read container config file contents
      command: 'cat {{ file_container_config }}'
      register: container_config_contents
    - name: Parse container config
      set_fact:
        container_config: '{{ container_config_contents | from_json }}'
    - name: Set container IP Address
      set_fact:
        container_addr: '{{ container_config.container_addr }}'
  rescue:
    - name: Start container
      register: container_status
      docker_container:
        env: '{{ env }}'
        hostname: '{{ container_name }}'
        image: '{{ project_name }}:{{ project_version }}'
        name: '{{ container_name }}'
        network_mode: '{{ network_name }}'
        networks:
          - name: '{{ network_name }}'
        networks_cli_compatible: true
        published_ports: all
        pull: false
        restart_policy: unless-stopped
        state: started
    - include_tasks: parse-container-status.yml

- name: Save container config
  template:
    src: container-config.json
    dest: '{{ file_container_config }}'

- name: Start container with persistent address
  register: container_status
  docker_container:
    env: '{{ env }}'
    hostname: '{{ container_name }}'
    image: '{{ project_name }}:{{ project_version }}'
    name: '{{ container_name }}'
    network_mode: '{{ network_name }}'
    networks:
      - name: '{{ network_name }}'
        ipv4_address: '{{ container_addr }}'
    networks_cli_compatible: true
    published_ports: all
    pull: false
    restart_policy: unless-stopped
    state: started

- name: Prune docker images
  docker_prune:
    images: true
    images_filters:
      dangling: false
